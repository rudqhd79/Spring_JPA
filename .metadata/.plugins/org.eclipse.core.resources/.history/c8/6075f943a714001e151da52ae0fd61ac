package jpabook.jpashop.domain;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "orders")
@Getter
@Setter
public class Order {

	@Id
	@GeneratedValue
	@Column(name = "order_id")
	private Long id;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "member_id")
	private Member member;
	
	// cascade = CascadeType.ALL은 현재 Entity(Order)를 저장하면 orderItems도 저장된다
	@OneToMany(mappedBy = "order", cascade = CascadeType.ALL)
	private List<OrderItem> orderItems = new ArrayList<>();
	
	// cascade 미적용 시
	/*
	 * persist(orderItemA) persist(orderItemB) persist(orderItemC) persist(order)
	 */
	// cascade 적용 시
	/* persist(order) */
	
	// 1 대 1 관계에서는 연관관계 주인을 정할 수 있다 (지금은 order 상태)
	@OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "delivery_id")
	private Delivery delivery;
	
	private LocalDateTime orderDate;
	
	@Enumerated(EnumType.STRING)
	private OrderStatus status;	 // 주문상태 [Order, Cancel]
	
	// 연관관계 편의 메소드 (Order 주변의 연관관계에 대한 Entity 세팅)
	public void setMember(Member member) {
		this.member = member;
		member.getOrders().add(this);
	}
	
	public void addOrderItem(OrderItem orderItem) {
		orderItems.add(orderItem);
		orderItem.setOrder(this);
	}
	
	public void setDelivery (Delivery delivery) {
		this.delivery = delivery;
		delivery.setOrder(this);
	}
	
	/*
	 * public static void main(String[] args) { Member member = new Member(); Order
	 * order = new Order();
	 * 
	 * member.getOrders().add(order); order.setMember(member); }
	 */
	
	// 생성 메서드
	public static Order createOrder(Member member, Delivery delivery, OrderItem orderItemss) {
		Order order = new Order();
		order.setMember(member);
		order.setDelivery(delivery);
		
		for (OrderItem orderItem : orderItemss) {
			order.addOrderItem(orderItem);
		}
		
	}
}
