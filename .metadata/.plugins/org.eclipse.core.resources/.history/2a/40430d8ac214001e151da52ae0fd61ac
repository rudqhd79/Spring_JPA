package jpabook.jpashop.service;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.Commit;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jpabook.jpashop.domain.Address;
import jpabook.jpashop.domain.Member;
import jpabook.jpashop.domain.Order;
import jpabook.jpashop.domain.OrderStatus;
import jpabook.jpashop.domain.item.Album;
import jpabook.jpashop.domain.item.Book;
import jpabook.jpashop.domain.item.Item;
import jpabook.jpashop.domain.item.Movie;
import jpabook.jpashop.exception.NotEnoughStockException;
import jpabook.jpashop.repository.OrderRepository;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
public class OrderServiceTest {

	@PersistenceContext
	EntityManager em;

	@Autowired
	OrderService orderService;

	@Autowired
	OrderRepository orderRepository;

	@Test
	@Commit
	public void 상품주문() throws Exception {
		// given
		Member member = createMember();
		Book book = createBook("JPA", 10000, 10);
		Album album = new Album();
		Movie movie = new Movie();

		// 만들어 봤는데 비즈니스 로직이 없어 비교할 것이 없다 (패스)
		album.setName("I live when 2023 with U");
		album.setArtist("아이유");

		movie.setName("아바타");
		movie.setActor("제이크 설리");
		movie.setActor("제임스 카메론");

		int orderCount = 5;

		// when
		Long orderId = orderService.order(member.getId(), book.getId(), orderCount);

		// then
		Order getOrder = orderRepository.findOne(orderId);

		assertEquals("상품 주문시 상태는 ORDER", OrderStatus.ORDER, getOrder.getStatus());
		assertEquals("주문한 상품 종류 수가 정확해야 한다", 1, getOrder.getOrderItems().size());
		assertEquals("주문 가격은 가격 * 수량이다", 10000 * orderCount, getOrder.getTotalPrice());
		// book 수량은 10개이고 남은 재고는
		assertEquals("주문 수량만큼 재고가 줄어야 한다", orderCount, book.getStockQuantity());
	}

	@Test
	public void 주문취소() {
		// Given
		Member member = createMember();
		Item item = createBook("시골 JPA", 10000, 10); // 이름, 가격, 재고
		int orderCount = 2;

		Long orderId = orderService.order(member.getId(), item.getId(), orderCount);
		// When
		orderService.cancelOrder(orderId);
		// Then
		Order getOrder = orderRepository.findOne(orderId);
		assertEquals("주문 취소시 상태는 CANCEL 이다.", OrderStatus.CANCEL, getOrder.getStatus());
		// 오류가 발생하였다 기대값 10 -> item.getStockQuantity == 2로 나온다
		// 원인은 Item Entitiy의 addStock 메소드 필드값이 +=로 바꾸어주었다
		assertEquals("주문이 취소된 상품은 그만큼 재고가 증가해야 한다.", 10, item.getStockQuantity());
	}

	@Test(expected = NotEnoughStockException.class)
	public void 상품주문_재고수량초과() throws Exception {
		// given
		Member member = createMember();
		Item item = createBook("JPA", 10000, 10);

		int orderCount = 11;

		// when
		orderService.order(member.getId(), item.getId(), orderCount);

		// then
		fail("재고 수량 부족 예외 발생");
	}

	private Member createMember() {
		Member member = new Member();
		member.setName("KIM");
		member.setAddress(new Address("서울", "서부샛길", "547-56"));
		em.persist(member);
		return member;
	}

	private Book createBook(String name, int price, int stockQuantity) {
		Book book = new Book();
		book.setName(name);
		book.setPrice(price);
		book.setStockQuantity(stockQuantity);
		em.persist(book);
		return book;
	}
}
