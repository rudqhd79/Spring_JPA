package jpabook.jpashop.service;

import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.Commit;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jpabook.jpashop.domain.Address;
import jpabook.jpashop.domain.Member;
import jpabook.jpashop.domain.Order;
import jpabook.jpashop.domain.OrderStatus;
import jpabook.jpashop.domain.item.Album;
import jpabook.jpashop.domain.item.Book;
import jpabook.jpashop.domain.item.Item;
import jpabook.jpashop.domain.item.Movie;
import jpabook.jpashop.repository.OrderRepository;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
public class OrderServiceTest {

	@PersistenceContext
	EntityManager em;
	
	@Autowired
	OrderService orderService;
	
	@Autowired
	OrderRepository orderRepository;
	
	@Test
	@Commit
	public void 상품주문() throws Exception {
		// given
		Member member = new Member();
		Book book = new Book();
		Album album = new Album();
		Movie movie = new Movie();
		
		member.setName("KIM");
		member.setAddress(new Address("서울", "서부샛길", "547-56"));
		em.persist(member);
		
		book.setName("JPA");
		book.setPrice(10000);
		book.setStockQuantity(10);
		em.persist(book);
		
		album.setName("I live in 2023 with U");
		album.setArtist("");
		
		int orderCount = 5;
		
		// when
		Long orderId = orderService.order(member.getId(), book.getId(), orderCount);
		
		// then
		Order getOrder = orderRepository.findOne(orderId);
		
		assertEquals("상품 주문시 상태는 ORDER", OrderStatus.ORDER, getOrder.getStatus());
		assertEquals("주문한 상품 종류 수가 정확해야 한다", 1, getOrder.getOrderItems().size());
		assertEquals("주문 가격은 가격 * 수량이다", 10000 * orderCount, getOrder.getTotalPrice());
		// book 수량은 10개이고 남은 재고는 
		assertEquals("주문 수량만큼 재고가 줄어야 한다", orderCount, book.getStockQuantity());
	}
	
	@Test
	public void 주문취소() throws Exception {
		// given
		
		// when
		
		// then
	}
	
	@Test
	public void 상품주문_재고수량초과() throws Exception {
		// given
		
		// when
		
		// then
	}
}
